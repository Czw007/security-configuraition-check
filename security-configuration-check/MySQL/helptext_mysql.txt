mysql.allow_persistent^Off^This directive allows or prevents persistent links to mysql server.^For servers with potentially unlimited set of connection parameters (i.e., mysql.max_persistent  = -1), forbid persistent connection with mysql.allow_persistent with Off value. However, this directive can be On for some sites with less traffic.
mysql.max_persistent^100^This directive defines the maximum number of persistent MySQL connections per process (i.e., whether to allow persistent connection to MySQL)^Generally, it is recommended to set the value of this directive to 100 or more.
mysql.max_links^100^The maximum number of MySQL connections per process, including persistent connections.^Although the value of the directive depends on several conditions (e.g., CPU, RAM size, the complexity of a query and its results, the number of parallel connections, the number of tables and database size, etc), we believe that you should not have these unlimited (unless you have complete control over the server, and thus you can be 100 percent sure that nobody will abuse your database, not even a misbehaving application), as you risk exhausting your server resources. You should calculate these in function of your server size, other MySQL parameters (mainly, memory related), and the rest of things that the server has to do. Because that can be a challenging task, there are people that runs MySQL in a separate node (hardware or virtual, but with RAM reservation, like KVM), this is specially true if you have several different services running, like: tomcat, apache, mail, LDAP.
mysql.default_port^3306^ The default TCP port number to use when connecting to the database server if no other port is specified. If no default is specified, the port will be obtained from the MYSQL_TCP_PORT environment variable, the mysql-tcp entry in /etc/services or the compile-time MYSQL_PORT constant, in that order. Win32 will only use the MYSQL_PORT constant.^ The default value  (i.e., NULL) of this directive should be changed to a valid port number. The reason is that typically an attacker attempts to exploit the default configuration prior to lunch more sophisticated attack actions.
mysql.default_socket^None^ The default socket name to use when connecting to a local database server (i.e., for local MySQL connects).  If empty, uses the built-in MySQL defaults.^ Often creating a file in a world-writable directory without randomizing the file name constitutes a security exposure that any local user can exploit. Certain MySQL binary distributions present on mysql.com have MySQL configured to use something like /tmp/mysql.sock, thus exposing the socket.  An administrator can specify a secure location for the socket in /etc/my.cnf or via the command line. The point, however, is that the default configuration is typically insecure. For instance, any local user on the mysql server could rename or replace the socket, and do a man-in-the-middle attack to steal or compromise credentials and sensitive data. In any case, it should be a simple matter to prepare binary distributions with the socket in a directory that only the mysql user can write, such as /var/mysql. In some systems, starting with the mysql 5.1.40 release, the mysql configuration file resides in the /etc/mysql/ directory and the pid and sock files are in the /var/run/mysqld/ directory. This is to comply with the Filesystem Hierarchy Standard.
mysql.connect_timeout^30^Maximum time for connect timeout in seconds. The value -1 means unlimited seconds to wait before the MySQL connection times out.  On Linux this timeout is also used to wait for the first response from the server.^ Generally, it is highly recommended to this value to small number in order to avoid too long waiting time for connection times out.
mysql.trace_mode^Off^Trace mode. When trace_mode is active (= On), warnings for table/index scans and SQL-Errors will be displayed.^Tracing always adds a lot of overhead (that is not limited to mysql) and should only be used during debbuging, analyzing, profiling the application. As a result, we have to be careful not using mysql.trace_mode as this generally downgrades the MySQL response.  Thus, turning mysql.trace_mode off indeed improved the MySQL response. mysql.trace_mode should be turned off in productive environments.
mysql.default_user^None^ The default user name to use when connecting to the database server if no other name is specified, i.e., the default user for mysql_connect().^It is a good practice to always change the default mysql user name to minimize the damage of some known attacks (e.g., SQL injection attack, Denial of service attack). In any case, if you leave the default value as it is, brute force is not necessary to break down the door. Attackers simply ring the bell! You are just inviting guess into your web sites.
mysql.default_password^None^The default password for mysql_connect().^ MySQL comes with no root password as default. This is a huge security risk. You will need to set one. So that the local computer gets root access as well, you will need to set a password for that too. (See also the mysql.default_user recommendation.)
mysql.default_host^None^ The default server host to use when connecting to the database server, namely the default port number for mysql_connect(). If no other host is specified, the port will be obtained from the MYSQL_TCP_PORT environment variable or the mysql-tcp entry in /etc/services or the compile-time MYSQL_PORT constant (in that order). Win32 will only look at the MYSQL_PORT constant. ^If the PHP directive mysql.default_host is undefined (default), then the default value is localhost:3306. In SQL safe mode, this parameter is ignored and value localhost:3306 is always used. A general recommendation is that store database access credentials in a file only root can read and include it into the Apache configuration file. Use either php.ini directives or server environment variables in this file. (See also the mysql.default_user recommendation.)

